from sqlite3 import IntegrityError
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from weather import *
from Keyboards import kb_client
from Keyboards import kb_client_clear
from data_base import database
from datetime import timedelta, datetime

import os

async def on_startup(_):
    print("Bot start")
    database.sql_start()

bot = Bot(token=os.getenv("TOKEN"))
dp = Dispatcher(bot)
all_cities = {
                "/–ö–∏—ó–≤": "Kyiv",
                "/–•–∞—Ä–∫—ñ–≤": "Kharkiv",
                "/–û–¥–µ—Å–∞": "Odesa",
                "/–î–Ω—ñ–ø—Ä–æ": "Dnipropetrovsk",
                "/–î–æ–Ω–µ—Ü—å–∫": "Donetsk",
                "/–ó–∞–ø–æ—Ä—ñ–∂–∂—è": "Zaporizhzhia",
                "/–õ—å–≤—ñ–≤": "Lviv",
                "/–ö—Ä–∏–≤–∏–π_–†—ñ–≥": "Krivyirih",
                "/–ú–∏–∫–æ–ª–∞—ó–≤": "Mikolaiv",
                "/–ú–∞—Ä—ñ—É–ø–æ–ª—å": "Mariupol",
                "/–õ—É–≥–∞–Ω—Å—å–∫": "Luhansk",
                "/–í—ñ–Ω–Ω–∏—Ü—è": "Vinnitsa",
                "/–•–µ—Ä—Å–æ–Ω": "Kherson",
                "/–ß–µ—Ä–Ω—ñ–≥—ñ–≤": "Chernigiv",
                "/–ü–æ–ª—Ç–∞–≤–∞": "Poltava",
                "/–ß–µ—Ä–∫–∞—Å–∏": "Chercasy",
                "/–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π": "Khmelnytskyi",
                "/–ß–µ—Ä–Ω—ñ–≤—Ü—ñ": "Chernivtsi",
                "/–ñ–∏—Ç–æ–º–∏—Ä": "Zhytomyr",
                "/–¢–µ—Ä–Ω–æ–ø—ñ–ª—å": "Ternopil",
                "/–†—ñ–≤–Ω–µ": "Rovenska",
                "/–ö—Ä–∏–º": "Crimea",
                "/–°—É–º–∏": "Sumy"
              }

async def weather_detal_output(message: types.Message, time, weather_detal_day):
    city = await database.user_check(message.from_user.id)
    stra = ""
    if (city != None):
        stra = "–ü–æ–≥–æ–¥–∞ –≤ –º—ñ—Å—Ç—ñ "+ city[0] + " –∑–∞ "+ time +"\n"
        weather = weather_detal(weather_detal_day, city[0])
        for key, (value, value1) in weather.items():
            stra = stra + key + "    " + value + "   " + value1 + "\n"
    else:
        stra = "–í–≤–µ–¥—ñ—Ç—å –ú—ñ—Å—Ç–æ —á–µ—Ä–µ–∑ /\n"
        for key, value in all_cities.items():
            stra = stra + "  " + key +"\n"
    await message.answer(stra)

@dp.message_handler(commands=["start"])
async def command_start(message: types.Message):
    try:
        await bot.send_message(message.from_user.id, "–ü—Ä–∏–≤—ñ—Ç, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å, —è–∫–∞ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å ", reply_markup=kb_client)
    except:
        await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –±–æ—Ç—É –≤ –ª–∏—á–∫—É \n @ssspammmbot")
    print(message.from_user.id)

@dp.message_handler(commands=["–ø–æ–≥–æ–¥–∞_—Å—å–æ–≥–æ–¥–Ω—ñ"])
async def weather1(message: types.Message):
    await weather_detal_output(message, str(datetime.now()), 0)

@dp.message_handler(commands=["–ø–æ–≥–æ–¥–∞_–∑–∞–≤—Ç—Ä–∞"])
async def weather2(message: types.Message):
    await weather_detal_output(message, str(datetime.now() + timedelta(days=1)), 1)

@dp.message_handler(commands=["–ø–æ–≥–æ–¥–∞_–ø—ñ—Å–ª—è_–∑–∞–≤—Ç—Ä–∞"])
async def weather3(message: types.Message):
    await weather_detal_output(message, str(datetime.now() + timedelta(days=2)), 2)

@dp.message_handler(commands=["–ø–æ–≥–æ–¥–∞_—á–µ—Ä–µ–∑_2_–¥–Ω—ñ"])
async def weather4(message: types.Message):
    await weather_detal_output(message, str(datetime.now() + timedelta(days=3)), 3)

@dp.message_handler(commands=["all_cities"])
async def help_all_cities(message: types.Message):
    stra = "–í–≤–µ–¥—ñ—Ç—å –ú—ñ—Å—Ç–æ —á–µ—Ä–µ–∑ /\n"
    for key, value in all_cities.items():
        stra = stra + "  " + key + "\n"
    await message.reply(stra)

@dp.message_handler(commands=["dead_orcs"])
async def dead_orcs(message: types.Message):
    await message.reply(dead_rusnia("06"))

@dp.message_handler(commands=["help"])
async def help(message: types.Message):
    await message.reply("–î–ª—è —Ç–æ–≥–æ, —â–æ–± –≤–∏–±—Ä–∞—Ç–∏ –º—ñ—Å—Ç–æ —è–∫–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å –≤–≤–µ–¥—ñ—Ç—å /all_cities")

@dp.message_handler()
async def message_all(message: types.Message):
    if all_cities.get(message.text):
        try:
            await database.new_user_db(message.from_user.id, all_cities.get(message.text))
        except IntegrityError:
            await database.user_update(message.from_user.id, all_cities.get(message.text))

    if message.text == "/capybara":
        img = open('images/hellinheavns-capybara.gif', 'rb')
        await bot.send_video(message.from_user.id, img, None, 'Text')
        img.close()

    if message.text == "/hide_keyboard":
        await bot.send_message(message.chat.id, "–£–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É", reply_markup=kb_client_clear)


#-------------------------CLIENT-------------------------------------


# async def weather_shorty(message: types.Message):
#     arr1 = weather_short()
#     if message.text == "–ü–æ–≥–æ–¥–∞_–†":
#         stra = "üåë   –ù—ñ—á  " + arr1[0] + "\n" + "‚òÄ   –†–∞–Ω–æ–∫  " + arr1[1] + "\n" + "üå§   –î–µ–Ω—å   " + arr1[2] + "\n" +"üåô   –í–µ—á—ñ—Ä   " + arr1[3] + "\n"
#         await message.answer(stra)
#     print(message.from_user.id)


    #-------------------------------------------------------------------------------------------------


def register_handlers_client(dp : Dispatcher):
    dp.register_message_handler(command_start, commands=["start"])
    dp.register_message_handler(weather1, commands=["–ø–æ–≥–æ–¥–∞_—Å—å–æ–≥–æ–¥–Ω—ñ"])
    dp.register_message_handler(weather2, commands=["–ø–æ–≥–æ–¥–∞_–∑–∞–≤—Ç—Ä–∞"])
    dp.register_message_handler(weather3, commands=["–ø–æ–≥–æ–¥–∞_–ø—ñ—Å–ª—è_–∑–∞–≤—Ç—Ä–∞"])
    dp.register_message_handler(weather4, commands=["–ø–æ–≥–æ–¥–∞_—á–µ—Ä–µ–∑_2_–¥–Ω—ñ"])
    dp.register_message_handler(all_cities, commands=["all_cities"])
executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
